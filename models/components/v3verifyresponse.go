// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type V3VerifyResponse struct {
	// A bearer token for use by the Prove client SDK.
	AuthToken *string `json:"authToken,omitempty"`
	// The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
	CorrelationID string `json:"correlationId"`
	// The result of the possession check. Possible values are `pending` and `not_applicable`, based on the `possessionType` passed in the input. Clients will have to call the Verify Status API to get a result if `possessionResult=pending`.
	PossessionResult string `json:"possessionResult"`
	// The result of the combination of `verifyResult` and `possessionResult`. Possible values are `true`, `pending`, and `false`. The value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
	Success string `json:"success"`
	// The result of the Verify process. Possible values are `success`, `pending`, and `failed`. If the Verify result is `pending`, clients will need to call the Verify Status API to get a result.
	VerifyResult string `json:"verifyResult"`
}

func (o *V3VerifyResponse) GetAuthToken() *string {
	if o == nil {
		return nil
	}
	return o.AuthToken
}

func (o *V3VerifyResponse) GetCorrelationID() string {
	if o == nil {
		return ""
	}
	return o.CorrelationID
}

func (o *V3VerifyResponse) GetPossessionResult() string {
	if o == nil {
		return ""
	}
	return o.PossessionResult
}

func (o *V3VerifyResponse) GetSuccess() string {
	if o == nil {
		return ""
	}
	return o.Success
}

func (o *V3VerifyResponse) GetVerifyResult() string {
	if o == nil {
		return ""
	}
	return o.VerifyResult
}
