// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provesdkservergo

// Generated from OpenAPI doc version 1.0.0 and generator version 2.683.1

import (
	"context"
	"fmt"
	"github.com/prove-identity/prove-sdk-server-go/internal/config"
	"github.com/prove-identity/prove-sdk-server-go/internal/hooks"
	"github.com/prove-identity/prove-sdk-server-go/internal/utils"
	"github.com/prove-identity/prove-sdk-server-go/models/components"
	"github.com/prove-identity/prove-sdk-server-go/retry"
	"net/http"
	"time"
)

const (
	// UAT for US Region
	ServerUatUs string = "uat-us"
	// Prod for US Region
	ServerProdUs string = "prod-us"
	// UAT for EU Region
	ServerUatEu string = "uat-eu"
	// Prod for EU Region
	ServerProdEu string = "prod-eu"
)

// ServerList contains the list of servers available to the SDK
var ServerList = map[string]string{
	ServerUatUs:  "https://platform.uat.proveapis.com",
	ServerProdUs: "https://platform.proveapis.com",
	ServerUatEu:  "https://platform.uat.eu.proveapis.com",
	ServerProdEu: "https://platform.eu.proveapis.com",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Provesdkservergo - Prove APIs: This specification describes the Prove API.
//
// OpenAPI Spec - generated.
type Provesdkservergo struct {
	SDKVersion string
	V3         *V3
	Identity   *Identity

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Provesdkservergo)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Provesdkservergo) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServer allows the overriding of the default server by name
func WithServer(server string) SDKOption {
	return func(sdk *Provesdkservergo) {
		_, ok := ServerList[server]
		if !ok {
			panic(fmt.Errorf("server %s not found", server))
		}

		sdk.sdkConfiguration.Server = server
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Provesdkservergo) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Provesdkservergo {
	sdk := &Provesdkservergo{
		SDKVersion: "0.11.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.11.0 2.683.1 1.0.0 github.com/prove-identity/prove-sdk-server-go",
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.V3 = newV3(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Identity = newIdentity(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
